{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Web App Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Web App"
      }
    },
    "Hosting Plan SKU": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "B1",
        "B2",
        "B3"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "Hosting Plan Instance Count": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Describes plan's instance count"
      }
    },
    "SQL administrator login": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "SQL administrator password": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "SQL database name": {
      "type": "string",
      "metadata": {
        "description": "The name of the new database to create."
      }
    },
    "Function App Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app to create."
      }
    },
    "CosmosDB Api Type": {
      "type": "string",
      "metadata": {
        "description": "The Azure Cosmos DB API type, by default Cassandra; otherwise one of Gremlin, MongoDB, SQL, or Table"
      },
      "allowedValues": [
        "Cassandra",
        "Gremlin",
        "MongoDB",
        "SQL",
        "Table"
      ],
      "defaultValue": "Cassandra"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "hostingPlanName": "[concat('lfmhosting', parameters('Web App Name'))]",
    "webSiteName": "[concat('lfmweb', parameters('Web App Name'))]",
    "sqlserverName": "[concat('lfmsql', parameters('Web App Name'))]",
    "edition": "Basic",
    "maxSizeBytes": "1073741824",
    "requestedServiceObjectiveName" : "Basic",
    "collation": "SQL_Latin1_General_CP1_CI_AS",
    "cacheSKUName" : "Basic",
    "cacheSKUFamily": "C",
    "cacheSKUCapacity": 1,
    "cacheName": "[concat('lfmcache', parameters('Web App Name'))]",
    "appInsightsName": "[concat('lfmappinsight', parameters('Web App Name'))]",
    "serviceBusNamespaceName": "[concat('lfmservicebus', parameters('Web App Name'))]",
    "serviceBusSku": "Basic",
    "storageAccountName": "[concat('lfmstorage', parameters('Function App Name'))]",
    "storageAccountType": "Standard_LRS",
    "cosmosDBOfferType": "Standard",
    "cosmosDBAccountName": "[concat('lfmcosmos', parameters('Web App Name'))]",
    "eventGridTopicName": "",
    "eventGridSubscriptionName": "",
    "eventGridSubscriptionUrl": ""
  },
  "resources": [
    {
      "name": "[variables('sqlserverName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "SqlServer"
      },
      "apiVersion": "2014-04-01-preview",
      "properties": {
        "administratorLogin": "[parameters('SQL administrator Login')]",
        "administratorLoginPassword": "[parameters('SQL administrator password')]",
        "version": "12.0"
      },
      "resources": [
        {
          "name": "[parameters('SQL database name')]",
          "type": "databases",
          "location": "[parameters('location')]",
          "tags": {
            "displayName": "Database"
          },
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "properties": {
            "edition": "[variables('edition')]",
            "collation": "[variables('collation')]",
            "maxSizeBytes": "[variables('maxSizeBytes')]",
            "requestedServiceObjectiveName": "[variables('requestedServiceObjectiveName')]"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "location": "[parameters('location')]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "kind": "linux",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "HostingPlan"
      },
      "sku": {
        "name": "[parameters('Hosting Plan SKU')]",
        "capacity": "[parameters('Hosting Plan Instance Count')]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]",
        "[concat('Microsoft.Cache/Redis/', variables('cacheName'))]",
        "[resourceId('microsoft.insights/components/', variables('appInsightsName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Website"
      },
      "properties": {
        "name": "[variables('webSiteName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "type": "config",
          "name": "connectionstrings",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('webSiteName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "properties": {
            "TeamContext": {
              "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('SQL database name'), ';User Id=', parameters('SQL administrator Login'), '@', variables('sqlserverName'), ';Password=', parameters('SQL administrator password'), ';')]",
              "type": "SQLServer"
            }
          }
        },
        {
          "apiVersion": "2015-08-01",
          "type": "config",
          "name": "appsettings",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('webSiteName'))]",
            "[concat('Microsoft.Cache/Redis/', variables('cacheName'))]"
          ],
          "properties": {
            "CacheConnection": "[concat(variables('cacheName'),'.redis.cache.windows.net,abortConnect=false,ssl=true,password=', listKeys(resourceId('Microsoft.Cache/Redis', variables('cacheName')), '2015-08-01').primaryKey)]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('microsoft.insights/components/', variables('appInsightsName'))).InstrumentationKey]"
          }
        },
        {
          "apiVersion": "2016-08-01",
          "type": "config",
          "name": "web",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('webSiteName'))]",
            "[concat('Microsoft.Cache/Redis/', variables('cacheName'))]"
          ],
          "properties": {
            "ipSecurityRestrictions": [
              {
                "ipAddress": "193.58.48.0",
                "subnetMask": "255.255.240.0",
                "name": "Allow access from Forem"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "[variables('cacheName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[parameters('location')]",
      "apiVersion": "2015-08-01",
      "dependsOn": [],
      "tags": {
        "displayName": "cache"
      },
      "properties": {
        "sku": {
          "name": "[variables('cacheSKUName')]",
          "family": "[variables('cacheSKUFamily')]",
          "capacity": "[variables('cacheSKUCapacity')]"
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "tags": {
          "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
          "displayName": "AppInsightsComponent"
      },
      "properties": {
          "applicationId": "[variables('appInsightsName')]"
      }
  },
  {
    "apiVersion": "2017-04-01",
    "name": "[variables('serviceBusNamespaceName')]",
    "type": "Microsoft.ServiceBus/namespaces",
    "location": "[parameters('location')]",
    "sku": {
      "name": "[variables('serviceBusSku')]"
    }
  },
  {
    "apiVersion": "2016-08-01",
    "type": "Microsoft.Web/sites",
    "name": "[parameters('Function App Name')]",
    "location": "[parameters('location')]",
    "kind": "functionapp",
    "properties": {
      "name": "[parameters('Function App Name')]",
      "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
      "hostingEnvironment": "",
      "clientAffinityEnabled": false,
      "siteConfig": {
        "alwaysOn": true
      }
    },
    "dependsOn": [
      "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
      "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
      "[resourceId('microsoft.insights/components/', variables('appInsightsName'))]"
    ],
    "resources": [
      {
        "apiVersion": "2016-08-01",
        "name": "appsettings",
        "type": "config",
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('Function App Name'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
          "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]",
          "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]",
          "FUNCTIONS_EXTENSION_VERSION": "~1",
          "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('microsoft.insights/components/', variables('appInsightsName'))).InstrumentationKey]"
        }
      }
    ]
  },
  {
    "type": "Microsoft.Storage/storageAccounts",
    "name": "[variables('storageAccountName')]",
    "apiVersion": "2018-02-01",
    "location": "[parameters('location')]",
    "kind": "Storage",
    "sku": {
      "name": "[variables('storageAccountType')]"
    },
    "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [
            {
              "value": "193.58.48.0/20",
              "action": "Allow"
            }
          ],
          "defaultAction": "Deny"
        }
      }
  },
  {
    "apiVersion": "2015-04-08",
    "type": "Microsoft.DocumentDB/databaseAccounts",
    "kind": "[if(equals(parameters('CosmosDB Api Type'), 'MongoDB'), 'MongoDB', 'GlobalDocumentDB')]",
    "name": "[variables('cosmosDBAccountName')]",
    "location": "[parameters('location')]",
    "properties": {
      "name": "[variables('cosmosDBAccountName')]",
      "databaseAccountOfferType": "[variables('cosmosDBOfferType')]",
      "ipRangeFilter": "193.58.48.0/20,104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26,0.0.0.0",
      "locations": [
        {
          "locationName": "[parameters('location')]",
          "failoverPriority": 0
        },
        {
          "locationName": "[parameters('location')]",
          "failoverPriority": 1
        }
      ],
      "enableMultipleWriteLocations": true,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": []
                
    },
    "tags": {
      "defaultExperience": "[if(equals(parameters('CosmosDB Api Type'), 'Cassandra'), 'Cassandra', if(equals(parameters('CosmosDB Api Type'), 'Gremlin'), 'Graph', if(equals(parameters('CosmosDB Api Type'), 'MongoDB'), 'MongoDB', if(equals(parameters('CosmosDB Api Type'), 'SQL'), 'DocumentDB', if(equals(parameters('CosmosDB Api Type'), 'Table'), 'Table', '')))))]"
    }
  }
  ]
}
